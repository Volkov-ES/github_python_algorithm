"""
Задание 2.

Реализуйте два алгоритма.

Первый, в виде функции, должен обеспечивать поиск минимального значения для списка.
В основе алгоритма должно быть сравнение каждого числа со всеми другими элементами списка.
Сложность такого алгоритма: O(n^2) - квадратичная.

Второй, в виде функции, должен обеспечивать поиск минимального значения для списка.
Сложность такого алгоритма: O(n) - линейная.

Примечание:
Построить список можно через списковое включение.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.
"""

"""
Алгоритм 1. Сложность такого алгоритма: O(n^2) - квадратичная.
CОМНЕВАЮСЬ, ЧТО СЛОЖНОСТЬ КВАДРАТИЧНАЯ
"""

lst = [0, -22, 22, -333, 333, -999]

minnumber = lst[0]
for num in lst:
    if minnumber > num:
        minnumber = num

print(minnumber)



"""
Алгоритм 2. Сложность такого алгоритма: O(n) - линейная.
"""

def minimun(a, b):
    return a if a < b else b

numbers = [1, -10, 10, -111, 111, -777]

min = numbers[0]

for elem in numbers:
    min = minimun (min, elem)

print (min)



""" РЕШЕНИЯ ПРЕПОДАВАТЕЛЯ """
from random import randint

# Первый вариант с O(n^2)
def list_min_n2(lst):
    for i in lst:
        is_min = True
        for j in lst:
            if i > j:
                is_min = False
        if is_min:
            return i
        

# Второй вариант с O(n)
def list_min_n(lst):
    min_value = lst[0]
    for i in lst:
        if i < min_value:
            min_value = i
    return min_value
        
     
lst1 = [randint(0, 100) for i in range(20)]
print(lst1)
print(list_min_n2(lst1))
print(list_min_n(lst1))
        
